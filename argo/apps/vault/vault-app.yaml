apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  ports:
    - port: 8200
      targetPort: 8200
      protocol: TCP
      name: http
  selector:
    app: vault

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  serviceName: vault
  replicas: 1  # Single replica, adjust based on your HA needs
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      serviceAccountName: vault-service-account  # Specify Vault service account (defined separately)
      containers:
        - name: vault
          image: "hashicorp/vault:1.8.0"  # Use the desired Vault image version
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8200
              name: http
          env:
            - name: VAULT_ADDR
              value: "http://localhost:8200"
            - name: VAULT_API_ADDR
              value: "http://localhost:8200"
            - name: VAULT_CLUSTER_ADDR
              value: "https://localhost:8201"
          volumeMounts:
            - name: vault-config
              mountPath: /vault/config
            - name: vault-data
              mountPath: /vault/data
            - name: vault-tls-cert
              mountPath: /vault/tls
              readOnly: true
          livenessProbe:
            httpGet:
              path: /v1/sys/health
              port: 8200
            initialDelaySeconds: 60
            periodSeconds: 30
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /v1/sys/health
              port: 8200
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
          resources:
            limits:
              memory: "1Gi"
              cpu: "500m"
            requests:
              memory: "512Mi"
              cpu: "250m"
      volumes:
        - name: vault-config
          configMap:
            name: vault-config
        - name: vault-data
          persistentVolumeClaim:
            claimName: vault-pvc  # A PVC for Vault data
        - name: vault-tls-cert
          secret:
            secretName: vault-tls-cert  # TLS certificate for Vault (if using TLS)
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-pvc
  namespace: vault
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Adjust the size based on your requirements
  storageClassName: standard  # Customize based on your storage class
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: vault
  labels:
    app: vault
data:
  vault.hcl: |
    ui = true
    listener "tcp" {
      address = "0.0.0.0:8200"
      cluster_address = "0.0.0.0:8201"
      tls_disable = true  # Set to true if you are using self-signed certs, else configure TLS
    }
    storage "file" {
      path = "/vault/data"
    }
    api_addr = "http://localhost:8200"
    cluster_addr = "https://localhost:8201"
    disable_mlock = true  # Disable mlock for Vault container
    seal "awskms" {  # Optional: Example KMS seal (can be modified for other seal backends)
      region = "us-east-1"
      access_key = "your-access-key-id"
      secret_key = "your-secret-access-key"
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: vault-tls-cert
  namespace: vault
data:
  tls.crt: <base64-encoded-tls-cert>  # Provide base64-encoded TLS certificate
  tls.key: <base64-encoded-tls-key>  # Provide base64-encoded TLS private key
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ServiceAccount
metadata:
  name: vault-service-account
  namespace: vault
  labels:
    app: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-role
  namespace: vault
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "secrets"]
    verbs: ["get", "list", "create", "update"]
  - apiGroups: ["tekton.dev"]
    resources: ["pipelines", "pipelineruns", "tasks", "taskruns"]
    verbs: ["get", "list", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-rolebinding
  namespace: vault
subjects:
  - kind: ServiceAccount
    name: vault-service-account
    namespace: vault
roleRef:
  kind: Role
  name: vault-role
  apiGroup: rbac.authorization.k8s.io
