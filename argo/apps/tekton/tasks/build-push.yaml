apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-and-push
  annotations:
    description: |-
      Builds a container image using Kaniko and pushes to registry.
      Requires git source input and registry credentials.
spec:
  params:
    - name: image
      description: Full image name including registry and tag
      type: string
    - name: dockerfile
      description: Path to Dockerfile
      type: string
      default: "Dockerfile"
    - name: context
      description: Path to build context
      type: string
      default: "."
    - name: build-args
      description: Docker build args
      type: array
      default: []
    - name: registry-secret
      description: Name of the registry secret
      type: string
      default: "registry-credentials"
    - name: skip-tls-verify
      description: Skip TLS certificate verification
      type: string
      default: "false"

  workspaces:
    - name: source
      description: The git repo workspace
    - name: docker-config
      description: Contains config.json with registry credentials
      optional: true

  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v1.9.1
      securityContext:
        runAsUser: 0
      env:
        - name: DOCKER_CONFIG
          value: "/workspace/docker-config"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.dockerfile)
        - --context=$(workspaces.source.path)/$(params.context)
        - --destination=$(params.image)
        - --skip-tls-verify=$(params.skip-tls-verify)
        - --verbosity=info
        - --oci-layout-path=/workspace/output-image
        - --use-new-run
        - --compressed-caching=false
        - $(params.build-args != '[]' ? '--build-arg' : '')
        - $(params.build-args)

    - name: write-digest
      image: alpine
      script: |
        #!/bin/sh
        cat /workspace/output-image/index.json | jq -r '.manifests[0].digest' | tee /tekton/results/IMAGE-DIGEST
      volumeMounts:
        - name: output-image
          mountPath: /workspace/output-image
      workingDir: $(workspaces.source.path)

  volumes:
    - name: output-image
      emptyDir: {}

  results:
    - name: IMAGE-DIGEST
      description: Digest of the built image