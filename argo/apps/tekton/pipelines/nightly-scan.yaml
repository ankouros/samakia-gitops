apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: nightly-scan-pipeline
  namespace: tekton-pipelines
spec:
  params:
    - name: git-repository-url
      description: The Git repository URL to clone
      default: "https://github.com/your-org/your-repository.git"  # Replace with your Git repo URL
    - name: git-repository-ref
      description: The Git branch or tag to checkout
      default: "main"  # Default branch is 'main'
    - name: image-name
      description: The Docker image name to scan
      default: "your-image-name"  # Replace with your image name
    - name: image-tag
      description: The Docker image tag to scan
      default: "latest"  # Default to 'latest'
  resources:
    - name: git-source
      type: Git
    - name: image
      type: Image
  tasks:
    - name: clone-repository
      taskRef:
        name: git-clone
      resources:
        outputs:
          - name: source
            resourceRef:
              name: git-source
      params:
        - name: url
          value: "$(params.git-repository-url)"
        - name: revision
          value: "$(params.git-repository-ref)"
        
    - name: scan-image
      taskRef:
        name: trivy  # Replace with your preferred image scanning task (e.g., Trivy, Clair, etc.)
      resources:
        inputs:
          - name: source
            resourceRef:
              name: git-source
      params:
        - name: image
          value: "$(params.image-name):$(params.image-tag)"  # Image to scan
        - name: trivy-cache-dir
          value: "/workspace/cache/trivy"  # Cache directory for Trivy (or other scanner)

    - name: run-dependency-scan
      taskRef:
        name: dependency-scan  # Replace with a task that scans dependencies
      resources:
        inputs:
          - name: source
            resourceRef:
              name: git-source
      params:
        - name: scan-directory
          value: "/workspace/source"  # Directory to scan for outdated dependencies or security issues

    - name: notify-results
      taskRef:
        name: notify-slack  # You can use any notification task, e.g., notify-slack
      resources:
        inputs:
          - name: source
            resourceRef:
              name: git-source
      params:
        - name: webhook-url
          value: "https://hooks.slack.com/services/your/webhook/url"  # Slack webhook URL for notifications
        - name: message
          value: "Nightly scan completed. Please check the results."  # Custom message to send

